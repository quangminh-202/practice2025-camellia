Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!
Симметричное шифрование применяется для шифрования данных ключом шифрования.
Симметричное шифрование называется симметричным, потому что для шифрования и расшифрования используется один и тот же ключ. Имеется также асимметричное шифрование, при котором ключи шифрования и расшифрования (открытый и закрытый) различны.
Полезные данные, подвергающиеся шифрованию, называются открытым текстом.
Чтобы зашифровать открытый текст, нужно выполнить следующие действия:
Выбрать алгоритм шифрования (шифр);
Сгенерировать ключ шифрования;
Сгенерировать вектор инициализации (IV), или синхропосылку;
Выбрать режим работы шифра;
Выбрать тип дополнения;
Зашифровать открытый текст, применив выбранный шифр с выбранным ключом и типом дополнения в выбранном режиме работы.
Для потоковых шифров и некоторых режимов работы блочных шифров дополнение не нужно.
Сравнение блочных и потоковых шифров
Блочные шифры работают с блоками данных. Например, в популярном шифре Advanced Encryption Standard (AES) размер блока составляет 128 бит, т.е. данные шифруются блоками по 128 бит. Если объем данных больше размера блока, то данные разбиваются на блоки нужного размера. Если длина открытого текста не кратна размеру блока, то последний блок обычно дополняется до размера блока с учетом выбранного типа дополнения. Таким образом, в большинстве режимов работы блочного шифра длина шифртекста кратна размеру блока.
На вход алгоритма шифрования подается блок открытого текста (например, 16 байт), ключ шифрования и, возможно, какие­-то данные, зависящие от режима шифрования (например, предыдущий блок шифртекста или IV). Отдельные байты открытого текста помещаются в список или матрицу. Затем над этими байтами, байтами ключа шифрования и дополнительными, зависящими от режима байтами данных выполняются различные логические и арифмети­ческие операции: поразрядный циклический сдвиг, исключающее ИЛИ (XOR), сложение или вычитание, обмен полных или частичных байтов в списке или матрице. Результатом этих операций является блок шифртек­ста того же размера, что входной блок открытого текста.
Потоковые шифры оперируют не блоками, а отдельными байтами или даже битами данных. Это значит, что потоковые шифры не нуждаются в до­полнении. У них также нет режима работы. Благодаря таким характеристикам потоковые шифры проще использовать, особенно для посту­пающих потоком данных, их проще реализовать, и работают они быстрее блочных. Однако криптографы полагают, что в общем случае стойкость существующих потоковых шифров ниже, чем блочных.
В процессе шифрования и расшиф­рования потоковый шифр генерирует так называемый поток псевдослучайных цифр шифра, или гамму, взяв за основу ключ шифрования и IV или одноразовое число (nonce, т. е. number used once). Шифр принимает байты ключа шифрования и IV и выполняет над ними логические и мате­матические операции с целью породить бесконечный поток кажущихся случайными байтов. Это и есть гамма. При порождении гаммы потоковый шифр работает как генератор псевдослучайных чисел (ГПСЧ), который инициализируется ключом шифрования и IV.
На этапе шифрования поток шифртекста порождается путем объединения гаммы с потоком открытого текста. Обычно к байтам гаммы и открытого текста просто применяется операция XOR. На этапе расшифрования порождает­ся та же гамма, которая объединяется с потоком шифртекста.
Стойкость симметричного шифра
Криптостойкость, или просто стойкость шифра, криптографы обычно из­меряют в битах. Например, если противнику для вскрытия шифра нужно вы­полнить 2^256 вычислительных операций, то стойкость шифра равна 256 бит.
Максимально возможная стойкость шифра равна длине используемого ключа шифрования. Например, если используется 256­-битовый ключ, то стойкость шифра не может превышать 256 бит.
Если длина ключа равна 256 бит, то всего существует 2^256 возможных ключей. Противник может про­извести полный перебор, или исчерпывающий поиск, т.е. попробовать для расшифрования все возможные ключи.
Важно понимать, что вычислительная сложность экспоненциально возрастает с увеличением длины ключа, т.е. вскрытие шифра с 256-битовым ключом займет не в 2, а в 2^128 раз больше времени, чем вскрытие шифра с 128­-битовым ключом.
Сколько битов стойкости достаточно?
По состоянию на 2021 год в профессиональной среде сложилось общее мне­ние, подтвержденное и Национальным институтом стандартов и технологий (NIST), о том, что:
112 бит должно быть достаточно до 2030 года;
128 бит должно быть достаточно до следующего революционного прорыва в технологии или в математике.
Ожидается, что квантовые вычисления способны вдвое уменьшить число битов стойко­сти для симметричных криптографических алгоритмов.
DES и 3DES
Первым стандартом шифрования был Data Encryption Standard (DES). Это блочный шифр с размером блока 64 бит и длиной ключа 56 бит. И размер блока, и длина ключа слишком малы и не обеспе­ чивают стойкости шифра. Криптоаналитики еще и снизили стойкость DES до 39–41 бит. На практике ключ DES можно восстановить на современном персональном компьютере потребительского класса за несколько дней или даже часов.
3DES, или Triple DES, – шифр основанный на обычном DES. 3DES сводится к троекратному применению DES с двумя или тремя разными ключами. Считается, что стойкость 3DES составляет 112 бит для варианта с тремя ключами и всего 80 бит для варианта с двумя ключами.
3DES в три раза медленнее обычного DES. Шифр DES и сам довольно мед­ленный по сравнению с AES и другими конкурентами.
Не рекомендуется использовать шифры DES и 3DES в новых приложениях.
AES
AES – самый популярный из современных симметричных шифров. Он быстрый и стойкий. AES – блочный шифр с размером блока 128 бит. Существуют три варианта AES с длинами ключей 128, 192 и 256 бит. Они на­зываются соответственно AES-­128, AES­-192 и AES­-256.
Лучшим из известных атак удалось уменьшить стойкость AES всего на 2 бита: до 126, 190 и 254 бит.
Cовременных процессорах x86 и x86_64 имеются команды аппаратного ускорения AES, в совокупности называемые Advanced Encryption Standard New Instructions (AES-NI – расширение системы команд AES). Неко­торые процессоры ARMv8 поддерживают криптографическое расширение, также ускоряющее работу AES.
В AES применяется алгоритм шифрования Rijndael, который до стандар­тизации поддерживал больше размеров блоков и длин ключа. Поэтому мож­но сказать, что AES является подмножеством Rijndael.
Алгоритм Rijndael разработан двумя бельгийскими криптографами, Винсентом Рэйманом (Vincent Rijmen) и Йоаном Дайменом (Joan Daemen). Название Rijndael образовано из частей их имен, Rij и Dae.
AES был стандартизирован в 2001 году институтом NIST в качестве стандартного алгоритма шифрования для секретной коммерческой и правительственной информации (в США). Он также является самым популярным общедоступным симметричным шифром в мире.
RC4
RC4 – старый потоковый шифр, допускающий использование ключей длиной от 40 до 2048 бит. В прошлом он был очень популярен благодаря своей ско­рости и простоте реализации, но с годами в алгоритме обнаружилось много дефектов, и теперь он считается нестойким. Например, одна из атак снижает стойкость RC4 с 128­битовыми ключами всего до 26 бит.
ChaCha20
ChaCha20 – современный потоковый шифр, стойкий и быстрый. ChaCha20 можно применять с 128­ или 256-­битовым ключом.
Шифр ChaCha20 разработал Даниэль Дж. Бернштейн (Daniel J. Bernstein – DJB), знаменитый криптограф и криптоаналитик. DJB известен также други­ми проектами, в т.ч. qmail, djbdns, Poly1305 и Curve25519. ChaCha20 – вари­ант шифра Salsa20 того же автора, оптимизированный с целью повышения производительности.
ChaCha20 стал популярен, когда компания Google на­чала использовать его в своем браузере Chrome наряду с алгоритмом вычис­ления имитовставки (MAC) Poly1305. Затем поддержка ChaCha20 и Poly1305 была добавлена в OpenSSH.
ChaCha20 – быстрый шифр, его программная реали­зация быстрее, чем AES. Аппаратно ускоренная реализация AES на x86 или x86_64 и ARMv8 работает быстрее ChaCha20, но такое ускорение доступно не на всех процессорах.
Недостатком ChaCha20, хотя и не очень существенным, является то, что в нем используется счетчик блоков длиной всего 32 бит. Из­-за этого шифр может считаться стойким только при работе с непрерывными открытыми текстами, не превышающими 256 ГиБ.
Другие симметричные шифры
Blowfish, CAST5, ГОСТ89, IDEA, RC2 и RC5, – блочные шифры с размером блока 64 бит или переменным размером блока. Эти шифры не реко­мендуется использовать для очень длинных шифртекстов (длиннее 32 ГиБ) из­-за коллизионных атак и парадокса дней рождения.
ARIA, Camellia, SEED и SM4, – блочные шифры со 128­-битовыми блоками. При таком размере блока можно шифро­вать очень длинные открытые тексты (до 256 экзабайт), не опасаясь колли­зионных атак.
Национальные шифры
Национальные шифры разрабатываются и стандартизируются в конкретной стране. Зачастую такие шифры хороши, но не очень популяр­ны за пределами страны происхождения.
CAST5 или CAST-128 - долгое время был симметричным шифром по умолчанию в программе GNU Privacy Guard (GnuPG), пока его не заменили на AES. CAST5 – один из стандартных шифров, используемых канад­ским правительством.
ГОСТ89, или Магма, – старый государственный стандартный шифр, при­менявшийся в СССР, а затем в России. На смену ГОСТ89 пришел шифр ГОСТ2015, или Кузнечик, но ГОСТ89 при этом не был объявлен устаревшим.
SEED и ARIA – южнокорейские шифры.
Camellia – 128­-битовый блочный шифр, разработанный в 2000 году в Япо­нии компаниями NTT и Mitsubishi Electric.
SM4 – китайский национальный стандарт и используется в беспроводных локальных сетях (LAN) в Китае.
Шифрование данных — это процесс, который защищает конфиденциальные данные и играет ключевую роль в нашу цифровом эпоху. Существует несколько методов шифрования, предназначенных для различных типов данных. В этой статье мы рассмотрим три состояния данных и способы их безопасной защиты. Читайте далее!
Что такое шифрование данных?
С древних времен люди шифровали сообщения в коды (или шифротексты) для защиты скрытой информации. Единственный способ прочитать эти сообщения — найти ключ для декодирования текста. Этот подход используется и сегодня и называется шифрованием данных.
Алгоритмы шифрования постоянно улучшаются, чтобы обеспечивать надежную защиту конфиденциальных данных и противодействовать современным угрозам. Кроме того, многочисленные нормативные акты по защите данных контролируют, как управляются персональные данные. Например, ведущий нормативный акт по безопасности данных в Европе — Общий регламент по защите данных (GDPR).
Существует два типа шифрования данных:
Симметричное шифрование использует один и тот же ключ для шифрования и дешифрования данных. Оно широко применяется в различных приложениях, такий как VPN-сервисы, и для обмена файлами, хранения данных и многого другого.
Асимметричное шифрование включает пару ключей: открытый ключ и закрытый ключ. Этот тип шифрования используется в иных контекстах, чем симметричное шифрование, например, для цифровых подписей и блокчейнов.
Что такое шифрование данных?
Состояния данных: данные в покое, данные в транзите и данные в использовании
Чтобы эффективно защищать зашифрованные данные, важно понимать их состояние. Существует три состояния: данные в покое, данные в транзите и данные в использовании. Давайте внимательно рассмотрим каждое из них.
Данные в покое
Данные в покое — это данные, которые хранятся на компьютерных носителях и не передаются и не используются, например, данные на жестком диске, в базах данных, архивах и так далее.
Эти данные обычно становятся привлекательной целью для хакеров, так как могут содержать конфиденциальную информацию. Однако из-за ограниченного доступа данные в покое могут считаться менее уязвимыми, чем данные в транзите.
Как защитить данные в покое?
Для защиты этого типа данных необходимо шифровать все хранимые данные, контролировать разрешения на доступ, регулярно создавать резервные копии и хранить их в безопасных физических местах, внедрять файрволы, обновления безопасности и исправления и другие практики.
Данные в транзите
Данные в транзите (также называемые данные в движении) — это данные, которые передаются между местоположениями, например, между устройствами в локальной сети или через интернет. В зависимости от того, публичная ли сеть или частная, данные в транзите классифицируются на два типа.
Этот тип данных включает информацию, отправляемую по электронной почте или через мессенджеры, прямые трансляции или видеозвонки, транзакции в электронной коммерции и другое.
Как защитить данные в транзите?
При передаче по сетям данные подвержены риску утечки третьим лицам. Поэтому данные должны быть зашифрованы, желательно с использованием сквозного шифрования. Таким образом, только отправитель и получатель имеют ключ для дешифрования сообщения; кроме того, никакие другие стороны не могут его прочитать, даже в случае перехвата данных.
Данные в использовании
Данные в использовании — это данные, которые редактируются, доступны и обрабатываются пользователями или приложениями. Например, открытые документы, программы анализа в реальном времени, данные, обрабатываемые процессорами или хранящиеся в памяти (RAM).
Защита данных в использовании крайне важна, так как они уязвимы для утечек данных и доступа третьих лиц. Более того, если хакеры перехватят и скомпрометируют данные, они могут получить доступ как к данным в покое, так и к данным в транзите.
Как защитить данные в использовании?
Как и другие типы данных, шифрование данных в использовании важно для предотвращения потери данных. Кроме того, должны использоваться другие методы защиты, такие как постоянная аутентификация пользователей, управление разрешениями на доступ и соглашения о неразглашении.
данные в покое, данные в транзите и данные в использовании
Лучшие практики шифрования данных
Шифрование играет ключевую роль в защите данных. Давайте рассмотрим практики, которые помогают управлять доступом к данным и предотвращать утечки:
Категоризация данных на основе их состояния, чувствительности, профиля риска и нормативных требований. Это поможет выбрать наиболее эффективные методы защиты, обеспечивая безопасность для всех типов данных.
Внедрение базовых инструментов защиты. Файерволы, методы надежной аутентификации и управление идентификацией и доступом (IAM) относительно просты в реализации и очень важны для защите данных.
Использование автоматического контроля. Некоторые инструменты автоматически блокируют вредоносные файлы и пользователей, а также шифруют данные, чтобы снизить риск их компрометации.
Обеспечение полного шифрования диска. Это делается для защиты данных в случае потери или кражи устройства. С полным шифрованием диска хакеры не смогут получить доступ к данным, хранящимся на ноутбуке или смартфоне.
Внедрение решений для предотвращения потери данных (DLP). Эти решения мониторят данные, чтобы обнаружить потенциальные утечки во всех состояниях данных и предотвращать утечки.
Защита облачного хранения. Используйте брокеров безопасности облачного доступа (CASB), которые помогают сохранять информацию в облаке безопасной.
Использование практик управления мобильными устройствами (MDM) для защиты корпоративных данных. Программное обеспечение MDM помогает контролировать все устройства компании, как компьютеры, так и мобильные устройства.
Тенденции в шифровании данных
Сфера защиты данных постоянно развивается, чтобы противостоять угрозам хакеров. Вот некоторые актуальные тенденции в шифровании данных, которые, как ожидается, будут расти в будущем:
Сквозное шифрование
Оно обеспечивает шифрование данных во время их передачи между отправителем и получателем, предотвращая доступ хакеров к данным во время их транзита. Даже если данные перехвачены во время передачи, они остаются нечитаемыми для несанкционированных лиц.
Шифрование как услуга (EaaS)
Внедрение облачных решений для шифрования данных становится обычным явлением. Эти решения обеспечивают защиту данных для всех состояний данных и удобны для компаний и государственных организаций.
Bring your own encryption (BYOE)
С помощью BYOE люди могут самостоятельно управлять своими ключами шифрования, обеспечивая полный контроль над конфиденциальностью своих данных. Чтобы расшифровать данные, клиенты должны использовать свой ключ для восстановления исходного сообщения.
Шифрование на уровне полей
Этот метод шифрует определенные поля страницы на стороне клиента, такие как данные о платежах, пароли и информацию о здоровье. Таким образом, серверные провайдеры не имеют доступа к этим данным.
Последовательное шифрование ссылок
Этот метод шифрует данные на каждом узле связи или переходе в сети, обеспечивая повышенную безопасность, предотвращая несанкционированный доступ на любом этапе передачи данных.
Тенденции в шифровании данных
Удаление данных как часть защиты данных
Последний, но важный шаг в защите данных — это санация данных. Когда данные больше не нужны и устройство меняет владельцев, все данные должны быть надежно удалены, чтобы предотвратить несанкционированный доступ и потенциальные утечки данных. Ручное удаление не вариант, так как оно занимает много времени и оставляет остаточные данных.
Чтобы гарантировать, что данные удалены на 100%, используйте сертифицированные решения. NSYS Data Erasure — это программное обеспечение, разработанное для индустрии подержанных устройств. Оно позволяет одновременно стирать данные с нескольких мобильных телефонов и планшетов, подключая до 60 устройств к одному ПК.
Более того, NSYS Data Erasure стирает данные в соответствии с международными стандартами и нормативными актами, включая ADISA, NIST SP 800-88, GDPR и R2.
Нажмите кнопку ниже и попробуйте NSYS Data Erasure для вашего бизнеса!